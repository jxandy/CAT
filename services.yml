services:
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false

    Concerto\PanelBundle\:
        resource: '../../{Command,DAO,EventSubscriber,Service}'

        # controllers are imported separately to make sure they're public
        # and have a tag that allows actions to type-hint services
    Concerto\PanelBundle\Controller\:
        resource: '../../Controller'
        public: true
        tags: ['controller.service_arguments']

#event subscribers
    Concerto\PanelBundle\EventSubscriber\LocaleSubscriber:
        arguments:
            $defaultLocale: "%kernel.default_locale%"
        tags:
            - { name: kernel.event_subscriber }
      
    Concerto\PanelBundle\EventSubscriber\EntitySubscriber:
        tags:
            - { name: doctrine.event_subscriber }

    Concerto\PanelBundle\EventSubscriber\AuthenticationSubscriber:
        tags:
            - { name: kernel.event_subscriber }

    Concerto\PanelBundle\EventSubscriber\ResponseSubscriber:
        tags:
            - { name: kernel.event_listener, event: kernel.response, priority: -1001 }

#commands
    Concerto\PanelBundle\Command\ConcertoScheduledTaskCommand:
        autoconfigure: false

    Concerto\PanelBundle\Command\ConcertoTaskPackageInstallCommand:
        arguments:
            $administration: "%administration%"
            $testRunnerSettings: "%test_runner_settings%"

    Concerto\PanelBundle\Command\ConcertoTaskGitPullCommand:
        arguments:
            $administration: "%administration%"

    Concerto\PanelBundle\Command\ConcertoTaskGitEnableCommand:
        arguments:
            $administration: "%administration%"

    Concerto\PanelBundle\Command\ConcertoTaskGitUpdateCommand:
        arguments:
            $administration: "%administration%"

    Concerto\PanelBundle\Command\ConcertoTaskGitResetCommand:
        arguments:
            $administration: "%administration%"

    Concerto\PanelBundle\Command\ConcertoTaskContentImportCommand:
        arguments:
            $administration: "%administration%"

    Concerto\PanelBundle\Command\ConcertoRCacheCommand:
        arguments:
            $projectDir: "%kernel.project_dir%"
            $testRunnerSettings: "%test_runner_settings%"

    Concerto\PanelBundle\Command\ContentExportCommand:
        arguments:
            $version: "%version%"
            $projectDir: "%kernel.project_dir%"

    Concerto\PanelBundle\Command\ContentImportCommand:
        arguments:
            $projectDir: "%kernel.project_dir%"
            $webUser: "%web_user%"

    Concerto\PanelBundle\Command\ConcertoSetupCommand:
        arguments:
            $projectDir: "%kernel.project_dir%"

#repositories
    Concerto\PanelBundle\Repository\AdministrationSettingRepository:
        factory: doctrine.orm.entity_manager:getRepository
        arguments: [ Concerto\PanelBundle\Entity\AdministrationSetting]

    Concerto\PanelBundle\Repository\DataTableRepository:
        factory: doctrine.orm.entity_manager:getRepository
        arguments: [ Concerto\PanelBundle\Entity\DataTable]

    Concerto\PanelBundle\Repository\MessageRepository:
        factory: doctrine.orm.entity_manager:getRepository
        arguments: [ Concerto\PanelBundle\Entity\Message]

    Concerto\PanelBundle\Repository\RoleRepository:
        factory: doctrine.orm.entity_manager:getRepository
        arguments: [ Concerto\PanelBundle\Entity\Role]

    Concerto\PanelBundle\Repository\ScheduledTaskRepository:
        factory: doctrine.orm.entity_manager:getRepository
        arguments: [ Concerto\PanelBundle\Entity\ScheduledTask]

    Concerto\PanelBundle\Repository\TestRepository:
        factory: doctrine.orm.entity_manager:getRepository
        arguments: [ Concerto\PanelBundle\Entity\Test]

    Concerto\PanelBundle\Repository\TestNodeRepository:
        factory: doctrine.orm.entity_manager:getRepository
        arguments: [ Concerto\PanelBundle\Entity\TestNode]

    Concerto\PanelBundle\Repository\TestNodeConnectionRepository:
        factory: doctrine.orm.entity_manager:getRepository
        arguments: [ Concerto\PanelBundle\Entity\TestNodeConnection]

    Concerto\PanelBundle\Repository\TestNodePortRepository:
        factory: doctrine.orm.entity_manager:getRepository
        arguments: [ Concerto\PanelBundle\Entity\TestNodePort]

    Concerto\PanelBundle\Repository\TestWizardRepository:
        factory: doctrine.orm.entity_manager:getRepository
        arguments: [ Concerto\PanelBundle\Entity\TestWizard]

    Concerto\PanelBundle\Repository\TestWizardParamRepository:
        factory: doctrine.orm.entity_manager:getRepository
        arguments: [ Concerto\PanelBundle\Entity\TestWizardParam]

    Concerto\PanelBundle\Repository\TestWizardStepRepository:
        factory: doctrine.orm.entity_manager:getRepository
        arguments: [ Concerto\PanelBundle\Entity\TestWizardStep]

    Concerto\PanelBundle\Repository\TestSessionLogRepository:
        factory: doctrine.orm.entity_manager:getRepository
        arguments: [ Concerto\PanelBundle\Entity\TestSessionLog]

    Concerto\PanelBundle\Repository\TestVariableRepository:
        factory: doctrine.orm.entity_manager:getRepository
        arguments: [ Concerto\PanelBundle\Entity\TestVariable]

    Concerto\PanelBundle\Repository\TestSessionRepository:
        factory: doctrine.orm.entity_manager:getRepository
        arguments: [ Concerto\PanelBundle\Entity\TestSession]

    Concerto\PanelBundle\Repository\UserRepository:
        factory: doctrine.orm.entity_manager:getRepository
        arguments: [ Concerto\PanelBundle\Entity\User]

    Concerto\PanelBundle\Repository\ViewTemplateRepository:
        factory: doctrine.orm.entity_manager:getRepository
        arguments: [ Concerto\PanelBundle\Entity\ViewTemplate]

#services
    Concerto\PanelBundle\Service\AdministrationService:
        public: true
        arguments:
            $configSettings: "%administration%"
            $version: "%version%"
            $rootDir: "%kernel.root_dir%"
            $testRunnerSettings: "%test_runner_settings%"

    Concerto\PanelBundle\Service\ExportService:
        arguments:
            $version: "%version%"

    Concerto\PanelBundle\Service\FileService:
        arguments:
            $environment: "%kernel.environment%"

    Concerto\PanelBundle\Service\ImportService:
        arguments:
            $version: "%version%"

    Concerto\PanelBundle\Service\MaintenanceService:
        arguments:
            $administration: "%administration%"

    Concerto\PanelBundle\Service\TestSessionService:
        arguments:
            $environment: "%kernel.environment%"
            $secret: "%secret%"
            $testRunnerSettings: "%test_runner_settings%"

    Concerto\PanelBundle\Service\UserService:
        arguments:
            $uio: "%uio%"

    Concerto\PanelBundle\Service\RDataCacheService:
        arguments:
            $projectDir: "%kernel.project_dir%"
    
#controllers
    Concerto\PanelBundle\Controller\DataTableController:
        arguments:
            $environment: "%kernel.environment%"
        public: true

    Concerto\PanelBundle\Controller\DialogController:
        arguments:
            $rootDir: "%kernel.root_dir%"
        public: true

    Concerto\PanelBundle\Controller\TestController:
        arguments:
            $environment: "%kernel.environment%"
        public: true

    Concerto\PanelBundle\Controller\TestWizardController:
        arguments:
            $environment: "%kernel.environment%"
        public: true

    Concerto\PanelBundle\Controller\ViewTemplateController:
        arguments:
            $environment: "%kernel.environment%"
        public: true
    
#security
    Concerto\PanelBundle\Security\ObjectVoter:
        tags:
            - { name: security.voter }
    Concerto\PanelBundle\Security\UserVoter:
        tags:
            - { name: security.voter }

#aliases
    Cocur\Slugify\Slugify: "@cocur_slugify"